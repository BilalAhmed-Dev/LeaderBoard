apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  strategy: {}
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - image: tempdemoacr.azurecr.io/nodejs-redis-docker_backend:v1
          name: backend
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app: backend
---
apiVersion: v1
kind: Service
metadata:
  name: backend-api-loadbalancer
spec:
  loadBalancerIP: 52.142.17.13
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  strategy: {}
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - image: tempdemoacr.azurecr.io/nodejs-redis-docker_frontend:v1
          name: frontend
          ports:
            - containerPort: 3000
          stdin: true
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-loadbalancer
spec:
  loadBalancerIP: 20.185.11.233
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  selector:
    app: frontend
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - env:
            - name: MONGO_INITDB_DATABASE
              value: db
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: admin
            - name: MONGO_INITDB_ROOT_USERNAME
              value: admin
          image: tempdemoacr.azurecr.io/mongo:v1
          name: mongodb
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - mountPath: "/mnt/azure"
              name: mongo-claim0
              readOnly: true
      restartPolicy: Always
      volumes:
        - name: mongo-claim0
          persistentVolumeClaim:
            claimName: mongo-managed-disk
            readOnly: true
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy: {}
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - image: tempdemoacr.azurecr.io/redis:v1
          name: redis
          ports:
            - containerPort: 6379
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    app: redis
